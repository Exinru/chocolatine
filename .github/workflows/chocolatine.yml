name: chocolatine

on:
    push:
        branches-ignore:
            - 'ga-ignore-*'
    pull_request:
        branches-ignore:
            - 'ga-ignore-*'

env:
    MIRROR_URL: git@github.com:EpitechPromo2028/B-DOP-200-BAR-2-1-chocolatine-xinru.xu.git
    EXECUTABLES: asm

jobs:
    check_coding_style:
        name: coding-style
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/epitech/coding-style-checker:latest
        steps:
        - name: check repo
          uses: actions/checkout@v4
        - name: checking coding-style
          id: check_coding_style
          run: check.sh $(pwd) $(pwd)
        - name: error annotation
          run: |
            fl="./coding-style-reports.log"
            if [ ! -s "$fl" ]; then
               exit 0
            else 
                 title=($(awk -F: '{print $3}' ./coding-style-reports.log))
                 filename=($(awk -F: '{print $1}' ./coding-style-reports.log))
                 line=($(awk -F: '{print $2}' ./coding-style-reports.log))
                 type=($(awk -F: '{print $4}' ./coding-style-reports.log))
                 length=(${#title[@]} - 1)

                 for ((i = 0; i < $length; i++)); do
                     echo "::error title=${title[i]} coding style error,file=${filename[i]},line=${line[i]}::${type[i]}"
                 done
                 exit 1
            fi

    check_program_compilation:
        name: compilation
        needs: check_coding_style
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker
        steps:
        - name: check repo
          uses: actions/checkout@v4
        - name: check_make
          run: make
          timeout-minutes: 2
        - name: clean repo
          run: make clean
        - name: check executable
          run: |
            if [ ! -x $EXECUTABLES ]; then
              exit 1
            fi

    run_tests:
        name: testing
        needs: check_program_compilation
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker
        steps:
        - name: check repo
          uses: actions/checkout@v4
        - name: run tests
          run: make tests_run
        timeout-minutes: 2

    push_to_mirror:
        name: push to repo
        if: github.event_name == 'push'
        runs-on: ubuntu-latest
        needs: run_tests
        steps:
        - name: check repo
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: pixta-dev/repository-mirroring-action@v1
          with:
            target_repo_url: ${{env.MIRROR_URL}}
            ssh_private_key: ${{secrets.GIT_SSH_PRIVATE_KEY}}